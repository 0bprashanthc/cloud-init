Description: AZURE: Redact on-disk user password in /var/lib/ovf-env.xml
 The fabric provides the user password in plain text via the CDROM,
 and cloud-init has previously wrote the ovf-env.xml in /var/lib/waagent
 with the password in plain text. This change redacts the password.
Author: Ben Howard <ben.howard@ubuntu.com>
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1458052
Forwarded: yes

--- a/cloudinit/DataSourceAzure.py
+++ b/cloudinit/DataSourceAzure.py
@@ -24,6 +24,7 @@
 import pwd
 import subprocess
 import time
+import xml.etree.ElementTree as ET
 import yaml
 from xml.dom import minidom
 
@@ -70,6 +71,11 @@
 USERADD_GROUPS = 'adm,admin,cdrom'
 DEF_EPHEMERAL_LABEL = 'Temporary Storage'
 
+# The redacted password fails to meet password complexity requirements
+# so we can safely use this to mask/redact the password in the ovf-env.xml
+DEF_PASSWD_REDACTION = 'REDACTED'
+
+
 class DataSourceAzureNet(sources.DataSource):
     seed_dir = base_seeddir + '/azure'
 
@@ -395,14 +401,29 @@
 
 
 def write_files(datadir, files, dirmode=None):
+    def _redact_password(cnt, fname):
+        """Azure provides the UserPassword in plain text. So we redact it"""
+        try:
+            root = ET.fromstring(cnt)
+            for elem in root.iter():
+                if ('UserPassword' in elem.tag and
+                   elem.text != DEF_PASSWD_REDACTION):
+                    elem.text = DEF_PASSWD_REDACTION
+            return ET.tostring(root)
+        except Exception as e:
+            LOG.critical("failed to redact userpassword in {}".format(fname))
+            return cnt
+
     if not datadir:
         return
     if not files:
         files = {}
     util.ensure_dirs([datadir], dirmode)
     for (name, content) in files.items():
-        util.write_file(filename=os.path.join(datadir, name),
-                        content=content, mode=0600)
+        fname = os.path.join(datadir, name)
+        if 'ovf-env.xml' in fname:
+            content = _redact_password(content, fname)
+        util.write_file(filename=fname, content=content, mode=0600)
 
 
 def invoke_agent(cmd):
